{"version":3,"sources":["components/shared/Menu.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Menu","props","useState","isOpen","setIsOpen","className","brand","type","onClick","event","preventDefault","viewBox","fillRule","d","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gKA8DeA,EAxDe,SAACC,GAAkB,IAAD,EAChBC,oBAAS,GADO,mBACrCC,EADqC,KAC7BC,EAD6B,KAQ5C,OACI,yBAAKC,UAAU,eACX,yBAAKA,UAAU,+CAEX,6BACI,uBAAGA,UAAU,sBAAsBJ,EAAMK,QAG7C,6BACI,4BACIC,KAAK,SACLF,UAAU,2EACVG,QAjBH,SAACC,GACdA,EAAMC,iBACNN,GAAWD,KAgBK,yBAAKE,UAAU,uBAAuBM,QAAQ,aAC1C,uCACCR,EACG,0BACIS,SAAS,UACTC,EAAE,8MAGN,0BACID,SAAS,UACTC,EAAE,2HAO1B,yBAAKR,UAAS,UAAKF,EAAS,QAAU,SAAxB,eACV,uBAAGW,KAAK,IAAIT,UAAU,gEAAtB,UAGA,uBAAGS,KAAK,IAAIT,UAAU,gEAAtB,UAGA,uBAAGS,KAAK,IAAIT,UAAU,gEAAtB,UAGA,uBAAGS,KAAK,IAAIT,UAAU,gEAAtB,aC3CDU,EARO,WAClB,OACI,6BACI,kBAAC,EAAD,CAAMT,MAAM,SCMJU,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXvCC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDuHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACHA,EAAaC,gBAEhBC,OAAM,SAACC,GACJC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.bc9af54e.chunk.js","sourcesContent":["import React, { useState, MouseEvent } from 'react';\n\ninterface Props {\n    brand: React.ReactNode;\n}\n\nconst Menu: React.FC<Props> = (props: Props) => {\n    const [isOpen, setIsOpen] = useState(false);\n\n    const onExpand = (event: MouseEvent<HTMLButtonElement>): void => {\n        event.preventDefault();\n        setIsOpen(!isOpen);\n    };\n\n    return (\n        <nav className=\"bg-gray-200\">\n            <div className=\"flex items-center justify-between px-4 py-3\">\n                {/* Left */}\n                <div>\n                    <p className=\"text-2xl font-bold\">{props.brand}</p>\n                </div>\n                {/* Right */}\n                <div>\n                    <button\n                        type=\"button\"\n                        className=\"block text-gray-700 hover:text-black focus:text-white focus:outline-none\"\n                        onClick={onExpand}>\n                        <svg className=\"fill-current h-6 w-6\" viewBox=\"0 0 24 24\">\n                            <title>Menu</title>\n                            {isOpen ? (\n                                <path\n                                    fillRule=\"evenodd\"\n                                    d=\"M18.278 16.864a1 1 0 0 1-1.414 1.414l-4.829-4.828-4.828 4.828a1 1 0 0 1-1.414-1.414l4.828-4.829-4.828-4.828a1 1 0 0 1 1.414-1.414l4.829 4.828 4.828-4.828a1 1 0 1 1 1.414 1.414l-4.828 4.829 4.828 4.828z\"\n                                />\n                            ) : (\n                                <path\n                                    fillRule=\"evenodd\"\n                                    d=\"M4 5h16a1 1 0 0 1 0 2H4a1 1 0 1 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2z\"\n                                />\n                            )}\n                        </svg>\n                    </button>\n                </div>\n            </div>\n            <div className={`${isOpen ? 'block' : 'hidden'} px-2 pb-4`}>\n                <a href=\"#\" className=\"block mt-1 px-2 py-1 font-semibold rounded hover:bg-gray-100\">\n                    Link 1\n                </a>\n                <a href=\"#\" className=\"block mt-1 px-2 py-1 font-semibold rounded hover:bg-gray-100\">\n                    Link 2\n                </a>\n                <a href=\"#\" className=\"block mt-1 px-2 py-1 font-semibold rounded hover:bg-gray-100\">\n                    Link 3\n                </a>\n                <a href=\"#\" className=\"block mt-1 px-2 py-1 font-semibold rounded hover:bg-gray-100\">\n                    Link 4\n                </a>\n            </div>\n        </nav>\n    );\n};\n\nexport default Menu;\n","import React from 'react';\nimport Menu from './components/shared/Menu';\n\nconst App: React.FC = () => {\n    return (\n        <div>\n            <Menu brand=\"Hi\" />\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/styles.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}