{"version":3,"sources":["data/MenuLink.ts","components/shared/Menu.tsx","constants/strings.ts","components/LoopTypist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MENU_LINKS","label","url","Menu","props","useState","isOpen","setIsOpen","scrollY","useViewportScroll","y","useTransform","opacity","getLinks","aClass","map","v","key","href","className","nav","style","translateY","brand","type","onClick","event","preventDefault","viewBox","fillRule","d","defaultProps","LoopTypist","done","setDone","children","useEffect","setTimeout","onTypingDone","App","avgTypingDelay","stdTypingDelay","cursor","show","blink","element","Delay","ms","Backspace","count","delay","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sLAKaA,EAAyB,CAClC,CACIC,MAAO,OACPC,IAAK,KAET,CACID,MAAO,QACPC,IAAK,W,OCCPC,EAAwB,SAACC,GAAkB,IAAD,EAChBC,oBAAS,GADO,mBACrCC,EADqC,KAC7BC,EAD6B,KAEpCC,EAAYC,cAAZD,QAGFE,EAAIC,YAAaH,EAFR,CAAC,EAAG,GAAI,KACA,CAAC,GAAI,GAAI,KAE1BI,EAAUD,YAAaD,EAAG,CAAC,GAAI,IAAK,CAAC,EAAG,IAOxCG,EAAW,SAACC,GACd,OAAOd,EAAWe,KAAI,SAACC,GACnB,OACI,uBAAGC,IAAKD,EAAEf,MAAOiB,KAAMF,EAAEd,IAAKiB,UAAWL,GACpCE,EAAEf,WAMnB,OACI,kBAAC,IAAOmB,IAAR,CACIC,MAAO,CAAEC,WAAYZ,EAAGE,WACxBO,UAAU,gFACV,yBAAKA,UAAU,qCAEX,6BACI,uBAAGA,UAAU,sBAAsBf,EAAMmB,QAG7C,6BACI,4BACIC,KAAK,SACLL,UAAU,qFACVM,QA7BH,SAACC,GACdA,EAAMC,iBACNpB,GAAWD,KA4BK,yBAAKa,UAAU,uBAAuBS,QAAQ,aAC1C,uCACCtB,EACG,0BACIuB,SAAS,UACTC,EAAE,8MAGN,0BACID,SAAS,UACTC,EAAE,2HAO1B,yBAAKX,UAAU,mBACVN,EAAS,iFAEd,yBAAKM,UAAS,UAAKb,EAAS,QAAU,SAAxB,0BACTO,EAAS,mFAM1BV,EAAK4B,aArEuB,CACxBR,MCViB,gBDgFNpB,Q,gBEtDA6B,EApB2B,SAAC5B,GAAkB,IAAD,EAChCC,oBAAS,GADuB,mBACjD4B,EADiD,KAC3CC,EAD2C,KAEhDC,EAAa/B,EAAb+B,SAQR,OANAC,qBAAU,WACFH,GACAI,YAAW,kBAAMH,GAAQ,KAAQ,QAIrCD,EACO,mCAIP,kBAAC,IAAD,iBAAY7B,EAAZ,CAAmBkC,aAAc,kBAAYJ,GAAQ,MAChDC,ICMEI,EAvBO,WAClB,OACI,6BACI,kBAAC,EAAD,MACA,yBAAKpB,UAAU,QACX,kBAAC,EAAD,CACIqB,eAAgB,IAChBC,eAAgB,GAChBtB,UAAU,WACVuB,OAAQ,CACJC,MAAM,EACNC,OAAO,EACPC,QAAS,MAEb,kBAAC,IAAOC,MAAR,CAAcC,GAAI,MAClB,gDACA,kBAAC,IAAOC,UAAR,CAAkBC,MAAO,GAAIC,MAAO,UCTpCC,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXvCC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDuHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACHA,EAAaC,gBAEhBC,OAAM,SAACC,GACJC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ff567692.chunk.js","sourcesContent":["export default interface MenuLink {\n    label: string;\n    url: string;\n}\n\nexport const MENU_LINKS: MenuLink[] = [\n    {\n        label: \"Home\",\n        url: \"/\",\n    },\n    {\n        label: \"About\",\n        url: \"/about\",\n    }\n]","import React, { useState, MouseEvent } from 'react';\nimport { MENU_LINKS } from '../../data/MenuLink';\nimport { TITLE } from '../../constants/strings';\nimport { motion, useViewportScroll, useTransform } from 'framer-motion';\n\ninterface Props {\n    brand?: React.ReactNode;\n}\n\nconst defaultProps: Props = {\n    brand: TITLE,\n};\n\nconst Menu: React.FC<Props> = (props: Props) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const { scrollY } = useViewportScroll();\n    const yRange = [0, 35, 100];\n    const translaterange = [0, -5, -30];\n    const y = useTransform(scrollY, yRange, translaterange);\n    const opacity = useTransform(y, [0, -20], [1, 0]);\n\n    const onExpand = (event: MouseEvent<HTMLButtonElement>): void => {\n        event.preventDefault();\n        setIsOpen(!isOpen);\n    };\n\n    const getLinks = (aClass: string): React.ReactNode[] => {\n        return MENU_LINKS.map((v) => {\n            return (\n                <a key={v.label} href={v.url} className={aClass}>\n                    {v.label}\n                </a>\n            );\n        });\n    };\n\n    return (\n        <motion.nav\n            style={{ translateY: y, opacity }}\n            className=\"bg-transparent sm:flex items-center justify-between px-10 py-5 sticky w-full\">\n            <div className=\"flex items-center justify-between\">\n                {/* Left */}\n                <div>\n                    <p className=\"text-2xl font-bold\">{props.brand}</p>\n                </div>\n                {/* Right */}\n                <div>\n                    <button\n                        type=\"button\"\n                        className=\"sm:hidden block text-gray-600 hover:text-black focus:text-black focus:outline-none\"\n                        onClick={onExpand}>\n                        <svg className=\"fill-current h-6 w-6\" viewBox=\"0 0 24 24\">\n                            <title>Menu</title>\n                            {isOpen ? (\n                                <path\n                                    fillRule=\"evenodd\"\n                                    d=\"M18.278 16.864a1 1 0 0 1-1.414 1.414l-4.829-4.828-4.828 4.828a1 1 0 0 1-1.414-1.414l4.828-4.829-4.828-4.828a1 1 0 0 1 1.414-1.414l4.829 4.828 4.828-4.828a1 1 0 1 1 1.414 1.414l-4.828 4.829 4.828 4.828z\"\n                                />\n                            ) : (\n                                <path\n                                    fillRule=\"evenodd\"\n                                    d=\"M4 5h16a1 1 0 0 1 0 2H4a1 1 0 1 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2z\"\n                                />\n                            )}\n                        </svg>\n                    </button>\n                </div>\n            </div>\n            <div className=\"hidden sm:block\">\n                {getLinks('block sm:inline-block ml-2 px-2 py-1 font-semibold rounded hover:bg-gray-200')}\n            </div>\n            <div className={`${isOpen ? 'block' : 'hidden'} sm:hidden pb-4 -ml-2`}>\n                {getLinks('block sm:inline-block mt-1 px-2 py-1 font-semibold rounded hover:bg-gray-200')}\n            </div>\n        </motion.nav>\n    );\n};\n\nMenu.defaultProps = defaultProps;\n\nexport default Menu;\n","export const TITLE = \"Koenn Becker\";","import React, { useState, useEffect } from 'react';\nimport Typist, { TypistProps } from 'react-typist';\n\ninterface Props extends TypistProps {\n    children?: any;\n}\nconst LoopTypist: React.FC<TypistProps> = (props: Props) => {\n    const [done, setDone] = useState(false);\n    const { children } = props;\n\n    useEffect(() => {\n        if (done) {\n            setTimeout(() => setDone(false), 250);\n        }\n    });\n\n    if (done) {\n        return <p>&nbsp;</p>;\n    }\n\n    return (\n        <Typist {...props} onTypingDone={(): void => setDone(true)}>\n            {children}\n        </Typist>\n    );\n};\nexport default LoopTypist;\n","import React from 'react';\nimport Menu from './components/shared/Menu';\nimport Typist from 'react-typist';\nimport LoopTypist from './components/LoopTypist';\n\nconst App: React.FC = () => {\n    return (\n        <div>\n            <Menu />\n            <div className=\"p-10\">\n                <LoopTypist\n                    avgTypingDelay={100}\n                    stdTypingDelay={30}\n                    className=\"text-5xl\"\n                    cursor={{\n                        show: true,\n                        blink: true,\n                        element: '|',\n                    }}>\n                    <Typist.Delay ms={500} />\n                    <span>Hello, Welcome</span>\n                    <Typist.Backspace count={14} delay={1000} />\n                </LoopTypist>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/styles.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}