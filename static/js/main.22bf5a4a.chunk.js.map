{"version":3,"sources":["data/MenuLink.ts","hooks/useScrollPosition.ts","components/shared/Menu/Menu.tsx","constants/strings.ts","components/LoopTypist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MENU_LINKS","label","url","isBrowser","window","getScrollPosition","x","pageXOffset","y","pageYOffset","Menu","props","useState","isOpen","setIsOpen","isVisible","setIsVisible","effect","deps","wait","position","setPosition","useLayoutEffect","throttleTimeout","handleScroll","requestAnimationFrame","currPos","prevPos","addEventListener","removeEventListener","useScrollPosition","console","log","isShow","onExpand","event","preventDefault","getLinks","aClass","map","v","key","href","className","useMemo","brand","type","onClick","viewBox","fillRule","d","defaultProps","LoopTypist","typing","setTyping","children","useEffect","setTimeout","timeout","onTypingDone","cursor","blink","element","App","style","height","avgTypingDelay","stdTypingDelay","show","Delay","ms","Backspace","count","delay","primaryColor","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.22bf5a4a.chunk.js","sourcesContent":["export default interface MenuLink {\r\n    label: string;\r\n    url: string;\r\n}\r\n\r\nexport const MENU_LINKS: MenuLink[] = [\r\n    {\r\n        label: \"Home\",\r\n        url: \"/\",\r\n    },\r\n    {\r\n        label: \"About\",\r\n        url: \"/about\",\r\n    }\r\n]","import { useRef, useLayoutEffect, MutableRefObject, DependencyList, useEffect, useState } from 'react';\r\n\r\nconst isBrowser = typeof window !== `undefined`;\r\n\r\ninterface ScrollPosition {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ninterface GetScrollPositionParam {\r\n    element?: MutableRefObject<HTMLElement>;\r\n    useWindow?: boolean;\r\n}\r\n\r\nexport interface EffectParams {\r\n    prevPos: ScrollPosition;\r\n    currPos: ScrollPosition;\r\n}\r\n\r\nfunction getScrollPosition(): ScrollPosition {\r\n    return isBrowser ? { x: window.pageXOffset, y: window.pageYOffset } : { x: 0, y: 0 };\r\n}\r\n\r\nexport function useScrollPosition(effect: (value: EffectParams) => void, deps: DependencyList, wait: number): void {\r\n    const [position, setPosition] = useState<ScrollPosition>(getScrollPosition());\r\n    // initial render\r\n\r\n    useLayoutEffect(() => {\r\n        let throttleTimeout: number | null = null;\r\n        const handleScroll = (): void => {\r\n            if (wait) {\r\n                if (throttleTimeout === null) {\r\n                    throttleTimeout = window.requestAnimationFrame(() => {\r\n                        const currPos = getScrollPosition();\r\n                        effect({ prevPos: position, currPos });\r\n                        setPosition(currPos);\r\n                        throttleTimeout = null;\r\n                    });\r\n                }\r\n            } else {\r\n                const currPos = getScrollPosition();\r\n                effect({ prevPos: position, currPos });\r\n                setPosition(currPos);\r\n                throttleTimeout = null;\r\n            }\r\n        };\r\n\r\n        window.addEventListener('scroll', handleScroll);\r\n\r\n        return (): void => window.removeEventListener('scroll', handleScroll);\r\n    }, [deps]);\r\n}\r\n","import React, { useState, MouseEvent, useMemo } from 'react';\nimport { MENU_LINKS } from '../../../data/MenuLink';\nimport { TITLE } from '../../../constants/strings';\nimport './menu.css';\nimport { useScrollPosition, EffectParams } from '../../../hooks/useScrollPosition';\n\ninterface Props {\n    brand?: React.ReactNode;\n}\n\nconst defaultProps: Props = {\n    brand: TITLE,\n};\n\nconst Menu: React.FC<Props> = (props: Props) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [isVisible, setIsVisible] = useState(true);\n\n    useScrollPosition(\n        ({ prevPos, currPos }: EffectParams) => {\n            console.log(`Prev: ${prevPos.y} curr: ${currPos.y}`);\n            const isShow = prevPos.y >= currPos.y || currPos.y <= 10;\n            if (isShow !== isVisible) setIsVisible(isShow);\n        },\n        [isVisible],\n        1000,\n    );\n\n    const onExpand = (event: MouseEvent<HTMLButtonElement>): void => {\n        event.preventDefault();\n        setIsOpen(!isOpen);\n    };\n\n    const getLinks = (aClass: string): React.ReactNode[] => {\n        return MENU_LINKS.map((v) => {\n            return (\n                <a key={v.label} href={v.url} className={aClass}>\n                    {v.label}\n                </a>\n            );\n        });\n    };\n\n    return useMemo(() => {\n        return (\n            <nav\n                className={`${\n                    isVisible ? 'portfolio-nav-active' : 'portfolio-nav-inactive'\n                } bg-transparent sm:flex items-center justify-between px-10 py-5 sticky top-0 w-full`}>\n                <div className=\"flex items-center justify-between\">\n                    {/* Left */}\n                    <div>\n                        <p className=\"text-2xl font-bold\">{props.brand}</p>\n                    </div>\n                    {/* Right */}\n                    <div>\n                        <button\n                            type=\"button\"\n                            className=\"sm:hidden block text-gray-600 hover:text-black focus:text-black focus:outline-none\"\n                            onClick={onExpand}>\n                            <svg className=\"fill-current h-6 w-6\" viewBox=\"0 0 24 24\">\n                                <title>Menu</title>\n                                {isOpen ? (\n                                    <path\n                                        fillRule=\"evenodd\"\n                                        d=\"M18.278 16.864a1 1 0 0 1-1.414 1.414l-4.829-4.828-4.828 4.828a1 1 0 0 1-1.414-1.414l4.828-4.829-4.828-4.828a1 1 0 0 1 1.414-1.414l4.829 4.828 4.828-4.828a1 1 0 1 1 1.414 1.414l-4.828 4.829 4.828 4.828z\"\n                                    />\n                                ) : (\n                                    <path\n                                        fillRule=\"evenodd\"\n                                        d=\"M4 5h16a1 1 0 0 1 0 2H4a1 1 0 1 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2z\"\n                                    />\n                                )}\n                            </svg>\n                        </button>\n                    </div>\n                </div>\n                <div className=\"hidden sm:block\">\n                    {getLinks('block sm:inline-block ml-2 px-2 py-1 font-semibold rounded hover:bg-gray-200')}\n                </div>\n                <div className={`${isOpen ? 'block mobile-active' : 'mobile-inactive'} sm:hidden pb-4 -ml-2`}>\n                    {getLinks('block sm:inline-block mt-1 px-2 py-1 font-semibold rounded hover:bg-gray-200')}\n                </div>\n            </nav>\n        );\n    }, [isVisible, isOpen]);\n};\n\nMenu.defaultProps = defaultProps;\n\nexport default Menu;\n","export const TITLE = \"Koenn Becker\";","import React, { useState, useEffect } from 'react';\nimport Typist, { TypistProps } from 'react-typist';\nimport '../css/typist.css';\n\ninterface Props extends TypistProps {\n    children?: any;\n    timeout?: number;\n}\n\nconst defaultProps: Props = {\n    timeout: 1000,\n};\n\nconst LoopTypist: React.FC<TypistProps> = (props: Props) => {\n    const [typing, setTyping] = useState<boolean>(true);\n    const { children } = props;\n\n    useEffect(() => {\n        setTimeout(() => setTyping(true), props.timeout);\n    }, [typing]);\n\n    return typing ? (\n        <Typist {...props} onTypingDone={(): void => setTyping(false)}>\n            {children}\n        </Typist>\n    ) : (\n        <div className=\"Typist\">\n            <span {...props} className={props.className + ` Cursor ${props.cursor?.blink && ' Cursor--blinking'}`}>\n                {props.cursor?.element}\n            </span>\n        </div>\n    );\n};\n\nLoopTypist.defaultProps = defaultProps;\n\nexport default LoopTypist;\n","import React from 'react';\nimport Menu from './components/shared/Menu/Menu';\nimport Typist from 'react-typist';\nimport LoopTypist from './components/LoopTypist';\nimport { UndrawProgramming } from 'react-undraw';\n\nconst App: React.FC = () => {\n    return (\n        <div>\n            <Menu />\n            <div className=\"p-10\" style={{ height: '1200px' }}>\n                <LoopTypist\n                    avgTypingDelay={100}\n                    stdTypingDelay={30}\n                    className=\"text-5xl\"\n                    cursor={{\n                        show: true,\n                        blink: true,\n                        element: '|',\n                    }}>\n                    <Typist.Delay ms={500} />\n                    <span>Hello, Welcome</span>\n                    <Typist.Backspace count={14} delay={1000} />\n                </LoopTypist>\n                <UndrawProgramming primaryColor=\"#f\" height=\"100px\" />\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/styles.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}